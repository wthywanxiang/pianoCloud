<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demouser.mapper.ReserveMapper">
    <resultMap id="Unfinshed" type="com.example.demouser.entity.Reserve">
        <result column="sno" property="sno"></result>
        <result column="beginTime"  property="beginTime"></result>
        <result column="endTime" property="endTime"></result>
        <result column="status" property="status"></result>
        <result column="realBeginTime" property="realBeginTime"></result>
        <result column="realEndTime" property="realEndTime"></result>
        <result column="lengthOfTime" property="lengthOfTime"></result>
        <result column="roomId" property="roomId"></result>
        <association property="name" select="getNameByRoomId" column="roomId"></association>
    </resultMap>
<!--    public List<Reserve> getUnfinishedReserve(Integer sno);-->
    <select id="getUnfinishedReserve" resultMap="Unfinshed">
        select id,sno,beginTime,endTime,status,realBeginTime,realEndTime,roomId,sum(TIMEDIFF(beginTime,endTime)) as lengthOfTime
        from reserve
        where sno=#{sno} and status=0
        group by id,sno,beginTime,endTime,status,realBeginTime,realEndTime,roomId
    </select>
<!--   void cancelReserve(Integer number,Integer roomId ,LocalDateTime beginTime,LocalDateTime endTime);-->
    <delete id="cancelReserve">
        delete from reserve where sno=#{number} and roomId=#{roomId} and beginTime=#{beginTime} and endTime=#{endTime}
    </delete>
<!--void createReserve(Reserve reserve);-->
    <insert id="createReserve">
        insert into reserve(sno,beginTime,endTime,status,roomId)
        values (#{sno},#{beginTime},#{endTime},0,#{roomId})
    </insert>
    <select id="getNameByRoomId" resultType="String">
        select name from room where id=#{roomId}
    </select>

    <!--    UserDetail getUserDetail(Integer sno);
           private Double lengthOfTime;
           private Integer reserveCount;
           private Integer lateOfTime;
           private Integer violationCount;
           private String signature;
           0为未开始，1为正常结束，2为迟到，3为违约
   -->
    <select id="getUserDetailBySno" resultType="com.example.demouser.entity.UserDetail">
        select count(*) as reserveCount,
               sum(status=2) as lateOfTime,
               sum(status=3) as violationCount,
               sum(TIMEDIFF(realendTime,realbeginTime)) as lengthOfTime
        from reserve where sno=#{sno}
    </select>
    <!--void updateReserve(LocalDateTime localDateTime);-->
    <update id="updateReserve">
        update reserve set status=3
        where status=0 and realBeginTime is null and realEndTime is null and #{localDateTime} >= endTime
    </update>

    <resultMap id="userDetail" type="com.example.demouser.entity.Student">
        <id column="sno" property="sno"></id>
        <result column="name" property="name"></result>
        <result column="clazz" property="clazz"></result>
        <result column="grade" property="grade"></result>
        <association property="detail" select="getUserDetailBySno" column="sno">
        </association>
    </resultMap>
    <!--    List<Student> getAllGradeTopTen();-->
    <select id="getAllGradeTopTen" resultMap="userDetail">
        select * from student
    </select>
    <!--    List<Student> getStudentByGrade(Integer grade);-->
    <select id="getStudentByGrade" resultMap="userDetail">
        select * from student where grade=#{grade}
    </select>
    <!--    List<Student>getStudentByClazz(String clazz);-->
    <select id="getStudentByClazz" resultMap="userDetail">
        select * from student where clazz=#{clazz}
    </select>
    <!--    List<Reserve> getHistoryBySno(Integer sno);-->
    <select id="getHistoryBySno" resultType="com.example.demouser.entity.Reserve">
        select
            r.beginTime,r.endTime,r.status,r.realBeginTime,r.realEndTime,r.roomId,room.name,
            sum(TIMEDIFF(r.realEndTime,r.realBeginTime)) as lengthOfTime
        from reserve as r left join room on room.id=r.roomId
        where sno=#{sno} and status!=0
        group by r.beginTime,r.endTime,r.status,r.realBeginTime,r.realEndTime,r.roomId,room.name
    </select>
<!--       void setRealBeginTime(Reserve reserve);-->
    <update id="setRealBeginTime">
        update reserve set realBeginTime=#{realBeginTime} where id=#{id} and sno=#{sno}
    </update>
<!--    void setRealEndTime(Reserve reserve);-->
    <update id="setRealEndTime">
        update reserve set realEndTime=#{realEndTime},status=1 where id=#{id} and sno=#{sno}
    </update>
<!--    Integer checkRoomAvailability(Reserve reserve);-->
    <select id="checkRoomAvailability" resultType="Integer">
        select count(*) from reserve where roomId=#{roomId}
        and  (
                    (beginTime > #{beginTime} and beginTime &lt; #{endTime})
                    or (endTime > #{beginTime} and endTime &lt; #{endTime})
                    or (beginTime >= #{beginTime} and beginTime &lt; #{endTime})
                    or (endTime >= #{beginTime} and endTime &lt; #{endTime})
                    or (beginTime > #{beginTime} and beginTime &lt;= #{endTime})
                    or (endTime > #{beginTime} and endTime &lt;= #{endTime})
                )
    </select>
</mapper>
